include_directories(
	${SDL2_INCLUDE_DIRS}
	${SDL2_IMAGE_INCLUDE_DIRS}
	${SDL2_MIXER_INCLUDE_DIRS})
add_definitions(-DSTATIC)
set(CDOGS_SOURCES
	actor_fire.cpp
	actor_placement.cpp
	actors.cpp
	ai.cpp
	ai_context.cpp
	ai_coop.cpp
	ai_utils.cpp
	algorithms.cpp
	ammo.cpp
	animation.cpp
	AStar.cpp
	automap.cpp
	blit.cpp
	bullet_class.cpp
	c_array.cpp
	camera.cpp
	campaign_entry.cpp
	campaigns.cpp
	character.cpp
	character_class.cpp
	collision/collision.cpp
	collision/minkowski_hex.cpp
	color.cpp
	config.cpp
	config_apply.cpp
	config_io.cpp
	config_json.cpp
	config_old.cpp
	cpic.cpp
	damage.cpp
	defs.cpp
	door.cpp
	draw/char_sprites.cpp
	draw/draw.cpp
	draw/draw_actor.cpp
	draw/draw_buffer.cpp
	draw/drawtools.cpp
	draw/nine_slice.cpp
	emitter.cpp
	events.cpp
	files.cpp
	font.cpp
	font_utils.cpp
	game_events.cpp
	game_mode.cpp
	gamedata.cpp
	grafx.cpp
	grafx_bg.cpp
	handle_game_events.cpp
	hud/fps.cpp
	hud/gauge.cpp
	hud/health_gauge.cpp
	hud/hud.cpp
	hud/hud_num_popup.cpp
	hud/player_hud.cpp
	hud/wall_clock.cpp
	joystick.cpp
	json_utils.cpp
	keyboard.cpp
	log.cpp
	los.cpp
	map.cpp
	map_archive.cpp
	map_build.cpp
	map_cave.cpp
	map_classic.cpp
	map_new.cpp
	map_object.cpp
	map_static.cpp
	mathc/mathc.cpp
	mission.cpp
	mission_convert.cpp
	mission_static.cpp
	mouse.cpp
	music.cpp
	net_client.cpp
	net_server.cpp
	net_util.cpp
	objective.cpp
	objs.cpp
	palette.cpp
	particle.cpp
	path_cache.cpp
	pic.cpp
	pic_manager.cpp
	pickup.cpp
	pickup_class.cpp
	pics.cpp
	player.cpp
	player_template.cpp
	powerup.cpp
	quick_play.cpp
	screen_shake.cpp
	sounds.cpp
	texture.cpp
	thing.cpp
	tile.cpp
	tile_class.cpp
	triggers.cpp
	utils.cpp
	vector.cpp
	weapon.cpp
	weapon_class.cpp
	window_context.cpp
	XGetopt.cpp
	yajl_utils.cpp)
set(CDOGS_HEADERS
	actor_fire.h
	actor_placement.h
	actors.h
	ai.h
	ai_context.h
	ai_coop.h
	ai_utils.h
	algorithms.h
	ammo.h
	animation.h
	AStar.h
	automap.h
	blit.h
	bullet_class.h
	c_array.h
	camera.h
	campaign_entry.h
	campaigns.h
	character.h
	character_class.h
	collision/collision.h
	collision/minkowski_hex.h
	color.h
	config.h
	config_io.h
	config_json.h
	config_old.h
	cpic.h
	damage.h
	defs.h
	door.h
	draw/char_sprites.h
	draw/draw.h
	draw/draw_actor.h
	draw/draw_buffer.h
	draw/drawtools.h
	draw/nine_slice.h
	emitter.h
	events.h
	files.h
	font.h
	font_utils.h
	game_events.h
	game_mode.h
	gamedata.h
	grafx.h
	grafx_bg.h
	handle_game_events.h
	hud/fps.h
	hud/gauge.h
	hud/health_gauge.h
	hud/hud.h
	hud/hud_defs.h
	hud/hud_num_popup.h
	hud/player_hud.h
	hud/wall_clock.h
	joystick.h
	json_utils.h
	keyboard.h
	log.h
	los.h
	map.h
	map_archive.h
	map_build.h
	map_cave.h
	map_classic.h
	map_new.h
	map_object.h
	map_static.h
	mathc/mathc.h
	mission.h
	mission_convert.h
	mission_static.h
	mouse.h
	music.h
	net_client.h
	net_server.h
	net_util.h
	objective.h
	objs.h
	palette.h
	particle.h
	path_cache.h
	pic.h
	pic_manager.h
	pickup.h
	pickup_class.h
	pics.h
	player.h
	player_template.h
	powerup.h
	quick_play.h
	screen_shake.h
	sounds.h
	sys_config.h
	sys_specifics.h
	texture.h
	thing.h
	tile.h
	tile_class.h
	triggers.h
	utils.h
	vector.h
	weapon.h
	weapon_class.h
	window_context.h
	XGetopt.h
	yajl_utils.h)
set(NANOPB_SOURCES
	proto/msg.pb.cpp
    proto/nanopb/pb_common.cpp
    proto/nanopb/pb_decode.cpp
    proto/nanopb/pb_encode.cpp
	proto/msg.options
	proto/msg.proto
)
set(NANOPB_HEADERS
	proto/msg.pb.h
    proto/nanopb/pb.h
    proto/nanopb/pb_common.h
    proto/nanopb/pb_decode.h
    proto/nanopb/pb_encode.h
)

IF(NOT USE_SHARED_ENET)
    ADD_SUBDIRECTORY(enet)
ENDIF()

# proto
include_directories(proto/nanopb)

add_subdirectory(c_hashmap)
add_subdirectory(SDL_JoystickButtonNames)
add_subdirectory(yajl)

add_library(cdogs STATIC
	${CDOGS_SOURCES} ${CDOGS_HEADERS}
	${NANOPB_SOURCES} ${NANOPB_HEADERS})

target_link_libraries(cdogs
	c_hashmap
	json
	SDL_joystickbuttonnames
	yajl_s
	${SDL2_LIBRARY}
	${SDL2_IMAGE_LIBRARIES}
	${SDL2_MIXER_LIBRARIES}
	${ENet_LIBRARIES})
